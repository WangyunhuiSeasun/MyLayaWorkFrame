var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameMgr_1 = require("./Mgr/GameMgr");
var GameOver_1 = require("./View/GameOver/GameOver");
var RoleSkin_1 = require("./View/GameStart/RoleSkin");
var GameStart_1 = require("./View/GameStart/GameStart");
var ViewAutoScale_1 = require("./View/ViewAutoScale");
var Gaming_1 = require("./View/Gaming/Gaming");
var LoadingView_1 = require("./View/LoadingView");
var TipsView_1 = require("./View/TipsView/TipsView");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("Mgr/GameMgr.ts", GameMgr_1.default);
        reg("View/GameOver/GameOver.ts", GameOver_1.default);
        reg("View/GameStart/RoleSkin.ts", RoleSkin_1.default);
        reg("View/GameStart/GameStart.ts", GameStart_1.default);
        reg("View/ViewAutoScale.ts", ViewAutoScale_1.default);
        reg("View/Gaming/Gaming.ts", Gaming_1.default);
        reg("View/LoadingView.ts", LoadingView_1.default);
        reg("View/TipsView/TipsView.ts", TipsView_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "GameMain.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./Mgr/GameMgr":3,"./View/GameOver/GameOver":11,"./View/GameStart/GameStart":12,"./View/GameStart/RoleSkin":13,"./View/Gaming/Gaming":14,"./View/LoadingView":15,"./View/TipsView/TipsView":16,"./View/ViewAutoScale":17}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var User_1 = require("./User/User");
var HttpUnit_1 = require("./Net/HttpUnit");
var layaMaxUI_1 = require("./ui/layaMaxUI");
var LoadingView_1 = require("./View/LoadingView");
var WXAPI_1 = require("./WXAPI");
var Main = /** @class */ (function () {
    function Main() {
        this.loadingUI = null;
        this.loadingView = null;
        //预加载列表
        this.preLoadRes = new Array();
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        //GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        Laya.loader.maxLoader = 50;
        this.InitLoadingView();
        //加载资源
        this.LoadRes();
    };
    //初始化加载界面
    Main.prototype.InitLoadingView = function () {
        this.loadingUI = new layaMaxUI_1.ui.View.LoadingUI();
        Laya.stage.addChild(this.loadingUI);
        this.loadingUI.width = Laya.stage.width;
        this.loadingUI.height = Laya.stage.height;
        this.loadingView = this.loadingUI.getComponent(LoadingView_1.default);
        this.loadingView.SetProcess_CloudFlame(0);
    };
    //添加预加载的资源	
    Main.prototype.PreLoadRes = function () {
        //this._preLoadRes.push({ url: AppConfig.ResServer + "/json/example.json", type: Laya.Loader.JSON });		
    };
    //加载资源
    Main.prototype.LoadRes = function () {
        var _this = this;
        this.PreLoadRes();
        var resource = this.preLoadRes;
        var self = this;
        if (Laya.Browser.onMiniGame) {
            var loadSubResTask = Laya.Browser.window["wx"].loadSubpackage({
                name: 'subRes',
                success: function (res) {
                    // 分包加载成功,开始预加载资源
                    if (resource.length > 0) {
                        Laya.loader.load(resource, Laya.Handler.create(_this, function () {
                            self.LoadResComplate(); //预加载完成
                        }), Laya.Handler.create(_this, function (res) {
                            //todo:跟新进度条
                            self.loadingView.SetProcess_CloudFlame(res / 2 + 0.5);
                        }));
                    }
                    else {
                        self.LoadResComplate(); //预加载完成
                    }
                },
                fail: function (res) {
                    _this.LoadRes(); //加载失败，重新加载
                }
            });
            loadSubResTask.onProgressUpdate(function (res) {
                self.loadingView.SetProcess_CloudFlame(res / 2);
            });
        }
        else {
            if (resource.length > 0) {
                Laya.loader.load(resource, Laya.Handler.create(this, function () {
                    self.LoadResComplate();
                }), Laya.Handler.create(this, function (res) {
                    self.loadingView.SetProcess_CloudFlame(res);
                }));
            }
            else {
                self.LoadResComplate();
            }
        }
    };
    //加载资源完成
    Main.prototype.LoadResComplate = function () {
        this.loadingView.SetProcess_CloudFlame(1);
        this.UserLogin();
        this.CloadLoadingUI();
        console.log("---游戏加载完成---");
    };
    //用户登录
    Main.prototype.UserLogin = function () {
        var self = this;
        if (Laya.Browser.onMiniGame) {
            WXAPI_1.default.wxLogin_CloudFlame(function (code) {
                var _this = this;
                User_1.default.code = code;
                HttpUnit_1.default.Login_CloudFlame(function (res) {
                    if (res.code == 1) {
                        console.log("登陆成功！！！");
                        User_1.default.token = res.data.token;
                        User_1.default.openId = res.data.openid;
                        //ALD.aldSendOpenId(User.openId);
                        HttpUnit_1.default.GetGameData_CloudFlame(function (res) {
                            console.log("获取用户数据成功！！！");
                            if (1 == res.code) {
                                User_1.default.InitiUser_CloudFlame(res.data);
                            }
                            else {
                                User_1.default.InitiUser_CloudFlame(null);
                            }
                            GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene, false, Laya.Handler.create(_this, function () {
                            }));
                        }, function (res) {
                            console.log("获取用户数据失败！！！");
                            User_1.default.token = "";
                            User_1.default.openId = "";
                            User_1.default.InitiUser_CloudFlame(null);
                            GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene, false, Laya.Handler.create(_this, function () {
                            }));
                        });
                    }
                    else {
                        console.log("登陆失败！！！" + res);
                        User_1.default.InitiUser_CloudFlame(null);
                        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene, false, Laya.Handler.create(_this, function () {
                        }));
                    }
                }, function (res) {
                    console.log("登陆失败！！！" + res);
                    User_1.default.InitiUser_CloudFlame(null);
                    GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene, false, Laya.Handler.create(_this, function () {
                    }));
                });
            }, null);
        }
        else {
            User_1.default.TestInitUser_CloudFlame(); //测试
            GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene, false, Laya.Handler.create(this, function () {
            }));
        }
    };
    //关闭加载界面
    Main.prototype.CloadLoadingUI = function () {
        if (this.loadingUI && !this.loadingUI.destroyed) {
            this.loadingUI.destroy();
        }
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./Net/HttpUnit":7,"./User/User":10,"./View/LoadingView":15,"./WXAPI":19,"./ui/layaMaxUI":20}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewMgr_1 = require("./ViewMgr");
var WXAPI_1 = require("../WXAPI");
var SoundMgr_1 = require("./SoundMgr");
var GameMgr = /** @class */ (function (_super) {
    __extends(GameMgr, _super);
    // public get CurLevel()
    // {
    //     return this.curLevel;
    // }
    // protected curLevel : Level;
    function GameMgr() {
        var _this = _super.call(this) || this;
        GameMgr.instance = _this;
        return _this;
    }
    GameMgr.GetInstance = function () { return GameMgr.instance; };
    GameMgr.prototype.onAwake = function () {
        this.owner.scaleY = Laya.stage.height / this.owner.height;
        this.owner.scaleX = Laya.stage.width / this.owner.width;
        WXAPI_1.default.CheckUpdate_CloudFlame();
    };
    GameMgr.prototype.onEnable = function () {
    };
    GameMgr.prototype.onStart = function () {
        this.PreCreateGame_CloudFlame();
    };
    GameMgr.prototype.onDisable = function () {
    };
    GameMgr.prototype.PreCreateGame_CloudFlame = function () {
        //todo：这里添加初始化主场景的代码。
        var self = this;
        ViewMgr_1.default.instance.OpenView_CloudFlame(ViewMgr_1.ViewDef.GameStart, null, null);
        SoundMgr_1.default.instance.PlayBGM_CloudFlame("bgm");
    };
    GameMgr.instance = null;
    return GameMgr;
}(Laya.Script));
exports.default = GameMgr;
},{"../WXAPI":19,"./SoundMgr":4,"./ViewMgr":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SoundMgr = /** @class */ (function () {
    function SoundMgr() {
        this.enabledSound = true;
    }
    Object.defineProperty(SoundMgr.prototype, "Enabled_CloudFlame", {
        get: function () {
            return this.enabledSound;
        },
        set: function (e) {
            if (!e) {
                this.StopBGM_CloudFlame();
            }
            this.enabledSound = e;
        },
        enumerable: true,
        configurable: true
    });
    SoundMgr.prototype.GetSoundUrl_CloudFlame = function (name) {
        var url = SoundMgr.soundResPath + name + ".mp3";
        return url;
    };
    SoundMgr.prototype.PlaySound_CloudFlame = function (name) {
        if (!this.enabledSound)
            return;
        var url = this.GetSoundUrl_CloudFlame(name);
        if (Laya.Browser.onMiniGame) {
            var sound = laya.utils.Pool.getItem(name);
            if (sound == null) {
                sound = wx.createInnerAudioContext();
                sound.src = SoundMgr.soundResPath + name + ".mp3";
                sound.onEnded(function () {
                    laya.utils.Pool.recover(name, sound);
                    sound.offEnded();
                });
            }
            sound.play();
        }
        else {
            Laya.SoundManager.playSound(url, 1);
        }
    };
    SoundMgr.prototype.PlayBGM_CloudFlame = function (name) {
        if (!this.enabledSound)
            return;
        var url = this.GetSoundUrl_CloudFlame(name);
        if (Laya.Browser.onMiniGame) {
            if (!this.bgm) {
                this.bgm = wx.createInnerAudioContext();
            }
            this.bgm.stop();
            this.bgm.src = url;
            this.bgm.loop = true;
            this.bgm.play();
        }
        else {
            Laya.SoundManager.playMusic(url, 0);
        }
    };
    SoundMgr.prototype.StopBGM_CloudFlame = function () {
        if (Laya.Browser.onMiniGame) {
            if (this.bgm) {
                this.bgm.stop();
            }
        }
        else {
            Laya.SoundManager.stopMusic();
        }
    };
    SoundMgr.soundResPath = "subRes/sound/";
    SoundMgr.instance = new SoundMgr();
    return SoundMgr;
}());
exports.default = SoundMgr;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewDef;
(function (ViewDef) {
    ViewDef["None"] = "";
    ViewDef["TipsView"] = "View/TipsView.json";
    ViewDef["GameStart"] = "View/GameStart.json";
    ViewDef["Gaming"] = "View/Gaming.json";
    ViewDef["GameOver"] = "View/GameOver.json";
    //todo:添加你的界面
})(ViewDef = exports.ViewDef || (exports.ViewDef = {}));
//界面管理器
var ViewMgr = /** @class */ (function () {
    function ViewMgr() {
        this._views = {};
    }
    ViewMgr.prototype.OpenView_CloudFlame = function (viewType, data, oncomplate) {
        if (this._views[viewType]) {
            var view = this._views[viewType];
            var coms = view._components;
            var viewBase = null;
            if (coms) {
                for (var index = 0; index < coms.length; index++) {
                    var element = coms[index];
                    if (element._viewBase) {
                        viewBase = element;
                        viewBase.OpenView_CloudFlame(data);
                        break;
                    }
                }
            }
            if (oncomplate) {
                oncomplate(viewBase);
            }
            return;
        }
        var viewUrl = String(viewType);
        var self = this;
        Laya.Scene.load(viewUrl, Laya.Handler.create(this, function (owner) {
            Laya.stage.addChild(owner);
            var view = owner;
            self._views[viewType] = view;
            var coms = owner._components;
            var viewBase = null;
            if (coms) {
                for (var index = 0; index < coms.length; index++) {
                    var element = coms[index];
                    if (element._viewBase) {
                        viewBase = element;
                        element._viewDef = viewType;
                        viewBase.OpenView_CloudFlame(data);
                        break;
                    }
                }
            }
            if (oncomplate) {
                oncomplate(viewBase);
            }
        }));
    };
    ViewMgr.prototype.CloseView_CloudFlame = function (viewType) {
        var view = this._views[viewType];
        if (view) {
            var owner = view;
            var coms = owner._components;
            if (coms) {
                for (var index = 0; index < coms.length; index++) {
                    var element = coms[index];
                    if (element._viewBase) {
                        element.onClose();
                        break;
                    }
                }
            }
            view.removeSelf();
            view.destroy();
            this._views[viewType] = null;
        }
    };
    ViewMgr.prototype.ShowView_CloudFlame = function (viewType) {
        var view = this._views[viewType];
        if (view) {
            var coms = view._components;
            if (coms) {
                for (var index = 0; index < coms.length; index++) {
                    var element = coms[index];
                    if (element._viewBase) {
                        element.show();
                        break;
                    }
                }
            }
        }
    };
    ViewMgr.prototype.HideView_CloudFlame = function (viewType) {
        var view = this._views[viewType];
        if (view) {
            var coms = view._components;
            if (coms) {
                for (var index = 0; index < coms.length; index++) {
                    var element = coms[index];
                    if (element._viewBase) {
                        element.hide();
                        break;
                    }
                }
            }
        }
    };
    ViewMgr.prototype.GetView_CloudFlame = function (viewType) {
        return this._views[viewType];
    };
    ViewMgr.prototype.ShowTips_CloudFlame = function (msg) {
        this.OpenView_CloudFlame(ViewDef.TipsView, msg);
    };
    ViewMgr.instance = new ViewMgr();
    return ViewMgr;
}());
exports.default = ViewMgr;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CryptoJS = require("./aes.js");
var AesTools = /** @class */ (function () {
    function AesTools() {
    }
    //加密
    AesTools.encrypt_CloudFlame = function (str) {
        var key = CryptoJS.enc.Utf8.parse(AesTools.KEY); // 秘钥
        var iv = CryptoJS.enc.Utf8.parse(AesTools.IV); //向量iv
        var encrypted = CryptoJS.AES.encrypt(str, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });
        return encrypted.toString();
    };
    //解密
    AesTools.decrypt_CloudFlame = function (str) {
        var key = CryptoJS.enc.Utf8.parse(AesTools.KEY); // 秘钥
        var iv = CryptoJS.enc.Utf8.parse(AesTools.IV); //向量iv
        var decrypted = CryptoJS.AES.decrypt(str, key, { iv: iv, padding: CryptoJS.pad.Pkcs7 });
        return decrypted.toString(CryptoJS.enc.Utf8);
    };
    AesTools.KEY = 'b#63fFJ6AvkK3YT*';
    AesTools.IV = 'J$f4DU%sNL73M&Go';
    return AesTools;
}());
exports.default = AesTools;
},{"./aes.js":9}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NetConfig_1 = require("./NetConfig");
var User_1 = require("../User/User");
var AesTools_1 = require("./AesTools");
var requestData = /** @class */ (function () {
    function requestData() {
        this.meth = "post";
        this.url = "";
        this.onSuccess = null;
        this.onFail = null;
        this.data = {};
    }
    return requestData;
}());
exports.requestData = requestData;
var HttpUnit = /** @class */ (function () {
    function HttpUnit() {
    }
    HttpUnit.Request_CloudFlame = function (req) {
        if (req.url.indexOf("https://") > -1 ||
            req.url.indexOf("http://") > -1) {
            req.url = req.url;
        }
        else {
            req.url = NetConfig_1.default.serverUrl + req.url;
        }
        var completeFunc = function (res) {
            console.log(res, "http Success");
            if (req.onSuccess) {
                req.onSuccess(res);
            }
            req.onSuccess = null;
            req = null;
        };
        var errorFunc = function (res) {
            console.log(res, "http fail");
            if (req.onFail) {
                req.onFail(res);
            }
            req.onFail = null;
            req = null;
        };
        var xhr = new Laya.HttpRequest();
        xhr.once(Laya.Event.COMPLETE, this, completeFunc);
        xhr.once(Laya.Event.ERROR, this, errorFunc);
        var dataStr = JSON.stringify(req.data);
        req.data.code = User_1.default.code;
        var time = "time=" + String(Date.now());
        var header = [
            "Content-Type", "application/json",
            "state", NetConfig_1.default.state,
            "gameid", NetConfig_1.default.gameid,
            "sign", AesTools_1.default.encrypt_CloudFlame(time),
        ];
        if (User_1.default.token) {
            header.push("token");
            header.push(User_1.default.token);
        }
        xhr.send(req.url, JSON.stringify(req.data), req.meth, "json", header);
    };
    //todo:这里添加你们和服务器相互的接口
    HttpUnit.Login_CloudFlame = function (onSuccess, onFail) {
        var req = new requestData();
        req.url = NetConfig_1.default.Login;
        req.onSuccess = onSuccess;
        req.onFail = onFail;
        HttpUnit.Request_CloudFlame(req);
    };
    HttpUnit.SaveGameData_CloudFlame = function (gameData, onSuccess, onFail) {
        var req = new requestData();
        req.url = NetConfig_1.default.SaveGameData;
        req.data.gameData = gameData;
        req.onSuccess = onSuccess;
        req.onFail = onFail;
        HttpUnit.Request_CloudFlame(req);
    };
    HttpUnit.GetGameData_CloudFlame = function (onSuccess, onFail) {
        var req = new requestData();
        req.url = NetConfig_1.default.GetUser;
        req.onSuccess = onSuccess;
        req.onFail = onFail;
        HttpUnit.Request_CloudFlame(req);
    };
    /**
     * IP屏蔽方法，需要在NetConfig类中设置IpBlock的接口地址
     * onSuccess方法返回参数的范例为 Object {code: 0, msg: "准一线", time: "1571034447", data: null}
     * @static
     * @memberof HttpUnit
     */
    HttpUnit.GetIpBlock_CloudFlame = function (onSuccess, onFail) {
        if (-1 != NetConfig_1.default.gameid) {
            var req = new requestData();
            req.url = NetConfig_1.default.IpBlock;
            req.onSuccess = onSuccess;
            req.onFail = onFail;
            HttpUnit.Request_CloudFlame(req);
        }
    };
    return HttpUnit;
}());
exports.default = HttpUnit;
},{"../User/User":10,"./AesTools":6,"./NetConfig":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NetConfig = /** @class */ (function () {
    function NetConfig() {
    }
    NetConfig.state = 0;
    NetConfig.gameid = -1;
    NetConfig.serverUrl = "https://sysxue.5iape.com";
    NetConfig.Login = "";
    NetConfig.SaveGameData = "";
    NetConfig.GetUser = "";
    /* 用来对IP地址进行屏蔽的接口地址，可以使用接口的返回值让某些广告逻辑在微信的审核地区(广州)发生变化 */
    NetConfig.IpBlock = "https://sysxue.5iape.com/api/share/ip_select";
    return NetConfig;
}());
exports.default = NetConfig;
},{}],9:[function(require,module,exports){
var CryptoJS = CryptoJS || function (u, p) {
  var d = {}, l = d.lib = {}, s = function () { }, t = l.Base = { extend: function (a) { s.prototype = this; var c = new s; a && c.mixIn(a); c.hasOwnProperty("init") || (c.init = function () { c.$super.init.apply(this, arguments) }); c.init.prototype = c; c.$super = this; return c }, create: function () { var a = this.extend(); a.init.apply(a, arguments); return a }, init: function () { }, mixIn: function (a) { for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]); a.hasOwnProperty("toString") && (this.toString = a.toString) }, clone: function () { return this.init.prototype.extend(this) } },
  r = l.WordArray = t.extend({
    init: function (a, c) { a = this.words = a || []; this.sigBytes = c != p ? c : 4 * a.length }, toString: function (a) { return (a || v).stringify(this) }, concat: function (a) { var c = this.words, e = a.words, j = this.sigBytes; a = a.sigBytes; this.clamp(); if (j % 4) for (var k = 0; k < a; k++)c[j + k >>> 2] |= (e[k >>> 2] >>> 24 - 8 * (k % 4) & 255) << 24 - 8 * ((j + k) % 4); else if (65535 < e.length) for (k = 0; k < a; k += 4)c[j + k >>> 2] = e[k >>> 2]; else c.push.apply(c, e); this.sigBytes += a; return this }, clamp: function () {
      var a = this.words, c = this.sigBytes; a[c >>> 2] &= 4294967295 <<
        32 - 8 * (c % 4); a.length = u.ceil(c / 4)
    }, clone: function () { var a = t.clone.call(this); a.words = this.words.slice(0); return a }, random: function (a) { for (var c = [], e = 0; e < a; e += 4)c.push(4294967296 * u.random() | 0); return new r.init(c, a) }
  }), w = d.enc = {}, v = w.Hex = {
    stringify: function (a) { var c = a.words; a = a.sigBytes; for (var e = [], j = 0; j < a; j++) { var k = c[j >>> 2] >>> 24 - 8 * (j % 4) & 255; e.push((k >>> 4).toString(16)); e.push((k & 15).toString(16)) } return e.join("") }, parse: function (a) {
      for (var c = a.length, e = [], j = 0; j < c; j += 2)e[j >>> 3] |= parseInt(a.substr(j,
        2), 16) << 24 - 4 * (j % 8); return new r.init(e, c / 2)
    }
  }, b = w.Latin1 = { stringify: function (a) { var c = a.words; a = a.sigBytes; for (var e = [], j = 0; j < a; j++)e.push(String.fromCharCode(c[j >>> 2] >>> 24 - 8 * (j % 4) & 255)); return e.join("") }, parse: function (a) { for (var c = a.length, e = [], j = 0; j < c; j++)e[j >>> 2] |= (a.charCodeAt(j) & 255) << 24 - 8 * (j % 4); return new r.init(e, c) } }, x = w.Utf8 = { stringify: function (a) { try { return decodeURIComponent(escape(b.stringify(a))) } catch (c) { throw Error("Malformed UTF-8 data"); } }, parse: function (a) { return b.parse(unescape(encodeURIComponent(a))) } },
  q = l.BufferedBlockAlgorithm = t.extend({
    reset: function () { this._data = new r.init; this._nDataBytes = 0 }, _append: function (a) { "string" == typeof a && (a = x.parse(a)); this._data.concat(a); this._nDataBytes += a.sigBytes }, _process: function (a) { var c = this._data, e = c.words, j = c.sigBytes, k = this.blockSize, b = j / (4 * k), b = a ? u.ceil(b) : u.max((b | 0) - this._minBufferSize, 0); a = b * k; j = u.min(4 * a, j); if (a) { for (var q = 0; q < a; q += k)this._doProcessBlock(e, q); q = e.splice(0, a); c.sigBytes -= j } return new r.init(q, j) }, clone: function () {
      var a = t.clone.call(this);
      a._data = this._data.clone(); return a
    }, _minBufferSize: 0
  }); l.Hasher = q.extend({
    cfg: t.extend(), init: function (a) { this.cfg = this.cfg.extend(a); this.reset() }, reset: function () { q.reset.call(this); this._doReset() }, update: function (a) { this._append(a); this._process(); return this }, finalize: function (a) { a && this._append(a); return this._doFinalize() }, blockSize: 16, _createHelper: function (a) { return function (b, e) { return (new a.init(e)).finalize(b) } }, _createHmacHelper: function (a) {
      return function (b, e) {
        return (new n.HMAC.init(a,
          e)).finalize(b)
      }
    }
  }); var n = d.algo = {}; return d
}(Math);
(function () {
  var u = CryptoJS, p = u.lib.WordArray; u.enc.Base64 = {
    stringify: function (d) { var l = d.words, p = d.sigBytes, t = this._map; d.clamp(); d = []; for (var r = 0; r < p; r += 3)for (var w = (l[r >>> 2] >>> 24 - 8 * (r % 4) & 255) << 16 | (l[r + 1 >>> 2] >>> 24 - 8 * ((r + 1) % 4) & 255) << 8 | l[r + 2 >>> 2] >>> 24 - 8 * ((r + 2) % 4) & 255, v = 0; 4 > v && r + 0.75 * v < p; v++)d.push(t.charAt(w >>> 6 * (3 - v) & 63)); if (l = t.charAt(64)) for (; d.length % 4;)d.push(l); return d.join("") }, parse: function (d) {
      var l = d.length, s = this._map, t = s.charAt(64); t && (t = d.indexOf(t), -1 != t && (l = t)); for (var t = [], r = 0, w = 0; w <
        l; w++)if (w % 4) { var v = s.indexOf(d.charAt(w - 1)) << 2 * (w % 4), b = s.indexOf(d.charAt(w)) >>> 6 - 2 * (w % 4); t[r >>> 2] |= (v | b) << 24 - 8 * (r % 4); r++ } return p.create(t, r)
    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
  }
})();
(function (u) {
  function p(b, n, a, c, e, j, k) { b = b + (n & a | ~n & c) + e + k; return (b << j | b >>> 32 - j) + n } function d(b, n, a, c, e, j, k) { b = b + (n & c | a & ~c) + e + k; return (b << j | b >>> 32 - j) + n } function l(b, n, a, c, e, j, k) { b = b + (n ^ a ^ c) + e + k; return (b << j | b >>> 32 - j) + n } function s(b, n, a, c, e, j, k) { b = b + (a ^ (n | ~c)) + e + k; return (b << j | b >>> 32 - j) + n } for (var t = CryptoJS, r = t.lib, w = r.WordArray, v = r.Hasher, r = t.algo, b = [], x = 0; 64 > x; x++)b[x] = 4294967296 * u.abs(u.sin(x + 1)) | 0; r = r.MD5 = v.extend({
    _doReset: function () { this._hash = new w.init([1732584193, 4023233417, 2562383102, 271733878]) },
    _doProcessBlock: function (q, n) {
      for (var a = 0; 16 > a; a++) { var c = n + a, e = q[c]; q[c] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360 } var a = this._hash.words, c = q[n + 0], e = q[n + 1], j = q[n + 2], k = q[n + 3], z = q[n + 4], r = q[n + 5], t = q[n + 6], w = q[n + 7], v = q[n + 8], A = q[n + 9], B = q[n + 10], C = q[n + 11], u = q[n + 12], D = q[n + 13], E = q[n + 14], x = q[n + 15], f = a[0], m = a[1], g = a[2], h = a[3], f = p(f, m, g, h, c, 7, b[0]), h = p(h, f, m, g, e, 12, b[1]), g = p(g, h, f, m, j, 17, b[2]), m = p(m, g, h, f, k, 22, b[3]), f = p(f, m, g, h, z, 7, b[4]), h = p(h, f, m, g, r, 12, b[5]), g = p(g, h, f, m, t, 17, b[6]), m = p(m, g, h, f, w, 22, b[7]),
        f = p(f, m, g, h, v, 7, b[8]), h = p(h, f, m, g, A, 12, b[9]), g = p(g, h, f, m, B, 17, b[10]), m = p(m, g, h, f, C, 22, b[11]), f = p(f, m, g, h, u, 7, b[12]), h = p(h, f, m, g, D, 12, b[13]), g = p(g, h, f, m, E, 17, b[14]), m = p(m, g, h, f, x, 22, b[15]), f = d(f, m, g, h, e, 5, b[16]), h = d(h, f, m, g, t, 9, b[17]), g = d(g, h, f, m, C, 14, b[18]), m = d(m, g, h, f, c, 20, b[19]), f = d(f, m, g, h, r, 5, b[20]), h = d(h, f, m, g, B, 9, b[21]), g = d(g, h, f, m, x, 14, b[22]), m = d(m, g, h, f, z, 20, b[23]), f = d(f, m, g, h, A, 5, b[24]), h = d(h, f, m, g, E, 9, b[25]), g = d(g, h, f, m, k, 14, b[26]), m = d(m, g, h, f, v, 20, b[27]), f = d(f, m, g, h, D, 5, b[28]), h = d(h, f,
          m, g, j, 9, b[29]), g = d(g, h, f, m, w, 14, b[30]), m = d(m, g, h, f, u, 20, b[31]), f = l(f, m, g, h, r, 4, b[32]), h = l(h, f, m, g, v, 11, b[33]), g = l(g, h, f, m, C, 16, b[34]), m = l(m, g, h, f, E, 23, b[35]), f = l(f, m, g, h, e, 4, b[36]), h = l(h, f, m, g, z, 11, b[37]), g = l(g, h, f, m, w, 16, b[38]), m = l(m, g, h, f, B, 23, b[39]), f = l(f, m, g, h, D, 4, b[40]), h = l(h, f, m, g, c, 11, b[41]), g = l(g, h, f, m, k, 16, b[42]), m = l(m, g, h, f, t, 23, b[43]), f = l(f, m, g, h, A, 4, b[44]), h = l(h, f, m, g, u, 11, b[45]), g = l(g, h, f, m, x, 16, b[46]), m = l(m, g, h, f, j, 23, b[47]), f = s(f, m, g, h, c, 6, b[48]), h = s(h, f, m, g, w, 10, b[49]), g = s(g, h, f, m,
            E, 15, b[50]), m = s(m, g, h, f, r, 21, b[51]), f = s(f, m, g, h, u, 6, b[52]), h = s(h, f, m, g, k, 10, b[53]), g = s(g, h, f, m, B, 15, b[54]), m = s(m, g, h, f, e, 21, b[55]), f = s(f, m, g, h, v, 6, b[56]), h = s(h, f, m, g, x, 10, b[57]), g = s(g, h, f, m, t, 15, b[58]), m = s(m, g, h, f, D, 21, b[59]), f = s(f, m, g, h, z, 6, b[60]), h = s(h, f, m, g, C, 10, b[61]), g = s(g, h, f, m, j, 15, b[62]), m = s(m, g, h, f, A, 21, b[63]); a[0] = a[0] + f | 0; a[1] = a[1] + m | 0; a[2] = a[2] + g | 0; a[3] = a[3] + h | 0
    }, _doFinalize: function () {
      var b = this._data, n = b.words, a = 8 * this._nDataBytes, c = 8 * b.sigBytes; n[c >>> 5] |= 128 << 24 - c % 32; var e = u.floor(a /
        4294967296); n[(c + 64 >>> 9 << 4) + 15] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360; n[(c + 64 >>> 9 << 4) + 14] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360; b.sigBytes = 4 * (n.length + 1); this._process(); b = this._hash; n = b.words; for (a = 0; 4 > a; a++)c = n[a], n[a] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360; return b
    }, clone: function () { var b = v.clone.call(this); b._hash = this._hash.clone(); return b }
  }); t.MD5 = v._createHelper(r); t.HmacMD5 = v._createHmacHelper(r)
})(Math);
(function () {
  var u = CryptoJS, p = u.lib, d = p.Base, l = p.WordArray, p = u.algo, s = p.EvpKDF = d.extend({ cfg: d.extend({ keySize: 4, hasher: p.MD5, iterations: 1 }), init: function (d) { this.cfg = this.cfg.extend(d) }, compute: function (d, r) { for (var p = this.cfg, s = p.hasher.create(), b = l.create(), u = b.words, q = p.keySize, p = p.iterations; u.length < q;) { n && s.update(n); var n = s.update(d).finalize(r); s.reset(); for (var a = 1; a < p; a++)n = s.finalize(n), s.reset(); b.concat(n) } b.sigBytes = 4 * q; return b } }); u.EvpKDF = function (d, l, p) {
    return s.create(p).compute(d,
      l)
  }
})();
CryptoJS.lib.Cipher || function (u) {
  var p = CryptoJS, d = p.lib, l = d.Base, s = d.WordArray, t = d.BufferedBlockAlgorithm, r = p.enc.Base64, w = p.algo.EvpKDF, v = d.Cipher = t.extend({
    cfg: l.extend(), createEncryptor: function (e, a) { return this.create(this._ENC_XFORM_MODE, e, a) }, createDecryptor: function (e, a) { return this.create(this._DEC_XFORM_MODE, e, a) }, init: function (e, a, b) { this.cfg = this.cfg.extend(b); this._xformMode = e; this._key = a; this.reset() }, reset: function () { t.reset.call(this); this._doReset() }, process: function (e) { this._append(e); return this._process() },
    finalize: function (e) { e && this._append(e); return this._doFinalize() }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function (e) { return { encrypt: function (b, k, d) { return ("string" == typeof k ? c : a).encrypt(e, b, k, d) }, decrypt: function (b, k, d) { return ("string" == typeof k ? c : a).decrypt(e, b, k, d) } } }
  }); d.StreamCipher = v.extend({ _doFinalize: function () { return this._process(!0) }, blockSize: 1 }); var b = p.mode = {}, x = function (e, a, b) {
    var c = this._iv; c ? this._iv = u : c = this._prevBlock; for (var d = 0; d < b; d++)e[a + d] ^=
      c[d]
  }, q = (d.BlockCipherMode = l.extend({ createEncryptor: function (e, a) { return this.Encryptor.create(e, a) }, createDecryptor: function (e, a) { return this.Decryptor.create(e, a) }, init: function (e, a) { this._cipher = e; this._iv = a } })).extend(); q.Encryptor = q.extend({ processBlock: function (e, a) { var b = this._cipher, c = b.blockSize; x.call(this, e, a, c); b.encryptBlock(e, a); this._prevBlock = e.slice(a, a + c) } }); q.Decryptor = q.extend({
    processBlock: function (e, a) {
      var b = this._cipher, c = b.blockSize, d = e.slice(a, a + c); b.decryptBlock(e, a); x.call(this,
        e, a, c); this._prevBlock = d
    }
  }); b = b.CBC = q; q = (p.pad = {}).Pkcs7 = { pad: function (a, b) { for (var c = 4 * b, c = c - a.sigBytes % c, d = c << 24 | c << 16 | c << 8 | c, l = [], n = 0; n < c; n += 4)l.push(d); c = s.create(l, c); a.concat(c) }, unpad: function (a) { a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255 } }; d.BlockCipher = v.extend({
    cfg: v.cfg.extend({ mode: b, padding: q }), reset: function () {
      v.reset.call(this); var a = this.cfg, b = a.iv, a = a.mode; if (this._xformMode == this._ENC_XFORM_MODE) var c = a.createEncryptor; else c = a.createDecryptor, this._minBufferSize = 1; this._mode = c.call(a,
        this, b && b.words)
    }, _doProcessBlock: function (a, b) { this._mode.processBlock(a, b) }, _doFinalize: function () { var a = this.cfg.padding; if (this._xformMode == this._ENC_XFORM_MODE) { a.pad(this._data, this.blockSize); var b = this._process(!0) } else b = this._process(!0), a.unpad(b); return b }, blockSize: 4
  }); var n = d.CipherParams = l.extend({ init: function (a) { this.mixIn(a) }, toString: function (a) { return (a || this.formatter).stringify(this) } }), b = (p.format = {}).OpenSSL = {
    stringify: function (a) {
      var b = a.ciphertext; a = a.salt; return (a ? s.create([1398893684,
        1701076831]).concat(a).concat(b) : b).toString(r)
    }, parse: function (a) { a = r.parse(a); var b = a.words; if (1398893684 == b[0] && 1701076831 == b[1]) { var c = s.create(b.slice(2, 4)); b.splice(0, 4); a.sigBytes -= 16 } return n.create({ ciphertext: a, salt: c }) }
  }, a = d.SerializableCipher = l.extend({
    cfg: l.extend({ format: b }), encrypt: function (a, b, c, d) { d = this.cfg.extend(d); var l = a.createEncryptor(c, d); b = l.finalize(b); l = l.cfg; return n.create({ ciphertext: b, key: c, iv: l.iv, algorithm: a, mode: l.mode, padding: l.padding, blockSize: a.blockSize, formatter: d.format }) },
    decrypt: function (a, b, c, d) { d = this.cfg.extend(d); b = this._parse(b, d.format); return a.createDecryptor(c, d).finalize(b.ciphertext) }, _parse: function (a, b) { return "string" == typeof a ? b.parse(a, this) : a }
  }), p = (p.kdf = {}).OpenSSL = { execute: function (a, b, c, d) { d || (d = s.random(8)); a = w.create({ keySize: b + c }).compute(a, d); c = s.create(a.words.slice(b), 4 * c); a.sigBytes = 4 * b; return n.create({ key: a, iv: c, salt: d }) } }, c = d.PasswordBasedCipher = a.extend({
    cfg: a.cfg.extend({ kdf: p }), encrypt: function (b, c, d, l) {
      l = this.cfg.extend(l); d = l.kdf.execute(d,
        b.keySize, b.ivSize); l.iv = d.iv; b = a.encrypt.call(this, b, c, d.key, l); b.mixIn(d); return b
    }, decrypt: function (b, c, d, l) { l = this.cfg.extend(l); c = this._parse(c, l.format); d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt); l.iv = d.iv; return a.decrypt.call(this, b, c, d.key, l) }
  })
}();
(function () {
  for (var u = CryptoJS, p = u.lib.BlockCipher, d = u.algo, l = [], s = [], t = [], r = [], w = [], v = [], b = [], x = [], q = [], n = [], a = [], c = 0; 256 > c; c++)a[c] = 128 > c ? c << 1 : c << 1 ^ 283; for (var e = 0, j = 0, c = 0; 256 > c; c++) { var k = j ^ j << 1 ^ j << 2 ^ j << 3 ^ j << 4, k = k >>> 8 ^ k & 255 ^ 99; l[e] = k; s[k] = e; var z = a[e], F = a[z], G = a[F], y = 257 * a[k] ^ 16843008 * k; t[e] = y << 24 | y >>> 8; r[e] = y << 16 | y >>> 16; w[e] = y << 8 | y >>> 24; v[e] = y; y = 16843009 * G ^ 65537 * F ^ 257 * z ^ 16843008 * e; b[k] = y << 24 | y >>> 8; x[k] = y << 16 | y >>> 16; q[k] = y << 8 | y >>> 24; n[k] = y; e ? (e = z ^ a[a[a[G ^ z]]], j ^= a[a[j]]) : e = j = 1 } var H = [0, 1, 2, 4, 8,
    16, 32, 64, 128, 27, 54], d = d.AES = p.extend({
      _doReset: function () {
        for (var a = this._key, c = a.words, d = a.sigBytes / 4, a = 4 * ((this._nRounds = d + 6) + 1), e = this._keySchedule = [], j = 0; j < a; j++)if (j < d) e[j] = c[j]; else { var k = e[j - 1]; j % d ? 6 < d && 4 == j % d && (k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255]) : (k = k << 8 | k >>> 24, k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255], k ^= H[j / d | 0] << 24); e[j] = e[j - d] ^ k } c = this._invKeySchedule = []; for (d = 0; d < a; d++)j = a - d, k = d % 4 ? e[j] : e[j - 4], c[d] = 4 > d || 4 >= j ? k : b[l[k >>> 24]] ^ x[l[k >>> 16 & 255]] ^ q[l[k >>>
          8 & 255]] ^ n[l[k & 255]]
      }, encryptBlock: function (a, b) { this._doCryptBlock(a, b, this._keySchedule, t, r, w, v, l) }, decryptBlock: function (a, c) { var d = a[c + 1]; a[c + 1] = a[c + 3]; a[c + 3] = d; this._doCryptBlock(a, c, this._invKeySchedule, b, x, q, n, s); d = a[c + 1]; a[c + 1] = a[c + 3]; a[c + 3] = d }, _doCryptBlock: function (a, b, c, d, e, j, l, f) {
        for (var m = this._nRounds, g = a[b] ^ c[0], h = a[b + 1] ^ c[1], k = a[b + 2] ^ c[2], n = a[b + 3] ^ c[3], p = 4, r = 1; r < m; r++)var q = d[g >>> 24] ^ e[h >>> 16 & 255] ^ j[k >>> 8 & 255] ^ l[n & 255] ^ c[p++], s = d[h >>> 24] ^ e[k >>> 16 & 255] ^ j[n >>> 8 & 255] ^ l[g & 255] ^ c[p++], t =
          d[k >>> 24] ^ e[n >>> 16 & 255] ^ j[g >>> 8 & 255] ^ l[h & 255] ^ c[p++], n = d[n >>> 24] ^ e[g >>> 16 & 255] ^ j[h >>> 8 & 255] ^ l[k & 255] ^ c[p++], g = q, h = s, k = t; q = (f[g >>> 24] << 24 | f[h >>> 16 & 255] << 16 | f[k >>> 8 & 255] << 8 | f[n & 255]) ^ c[p++]; s = (f[h >>> 24] << 24 | f[k >>> 16 & 255] << 16 | f[n >>> 8 & 255] << 8 | f[g & 255]) ^ c[p++]; t = (f[k >>> 24] << 24 | f[n >>> 16 & 255] << 16 | f[g >>> 8 & 255] << 8 | f[h & 255]) ^ c[p++]; n = (f[n >>> 24] << 24 | f[g >>> 16 & 255] << 16 | f[h >>> 8 & 255] << 8 | f[k & 255]) ^ c[p++]; a[b] = q; a[b + 1] = s; a[b + 2] = t; a[b + 3] = n
      }, keySize: 8
    }); u.AES = p._createHelper(d)
})();

module.exports = CryptoJS;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//游戏数据,为保持版本兼容，建议不要删除和修改字段名
var UserGameData = /** @class */ (function () {
    function UserGameData() {
        this.levelNum = 1; //当前关卡
        this.moneyNum = 0; //金币数量
        this.crystalNum = 0; //钻石数量    
    }
    return UserGameData;
}());
exports.UserGameData = UserGameData;
var User = /** @class */ (function (_super) {
    __extends(User, _super);
    function User() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(User, "IsLogin_CloudFlame", {
        get: function () {
            return (User.code != "") || (User.token != "");
        },
        enumerable: true,
        configurable: true
    });
    User.GetSaveData__CloudFlame = function () {
        return JSON.stringify(User._gameData);
    };
    User.TestInitUser_CloudFlame = function () {
        User._gameData.levelNum = 1;
        User._gameData.moneyNum = 10000000;
        User._gameData.crystalNum = 10000000;
    };
    User.InitiUser_CloudFlame = function (data) {
        if (data && 0 != data) {
            User._gameData.levelNum = data.levelNum;
            User._gameData.moneyNum = data.moneyNum;
            User._gameData.crystalNum = data.crystalNum;
        }
        else {
            //todo：处理没有获取到玩家数据的情况
        }
    };
    User.SetLeveNum_CloudFlame = function (levelNum) {
        User._gameData.levelNum = levelNum;
    };
    User.GetLeveNum_CloudFlame = function () {
        return User._gameData.levelNum;
    };
    User.AddMoney_CloudFlame = function (add) {
        add = Math.ceil(add);
        var last = User._gameData.moneyNum;
        User._gameData.moneyNum += add;
        // EventMgr.instance.dispatch(EventDef.Game_OnUserMoneyChange,
        //     {
        //         curr : User._gameData.moneyNum,
        //         last : last
        //     })
    };
    User.SubMoney_CloudFlame = function (sub) {
        sub = Math.ceil(sub);
        var last = User._gameData.moneyNum;
        User._gameData.moneyNum -= sub;
        if (User._gameData.moneyNum < 0) {
            User._gameData.moneyNum = 0;
        }
        // EventMgr.instance.dispatch(EventDef.Game_OnUserMoneyChange,
        //     {
        //         curr : User._gameData.moneyNum,
        //         last : last
        //     })
    };
    User.GetMoney_CloudFlame = function () {
        return User._gameData.moneyNum;
    };
    User.AddCrystal_CloudFlame = function (add) {
        add = Math.ceil(add);
        var last = User._gameData.crystalNum;
        User._gameData.crystalNum += add;
        // EventMgr.instance.dispatch(EventDef.Game_OnUserCrystalChange,
        //     {
        //         curr : User._gameData.crystalNum,
        //         last : last
        //     })
    };
    User.SubCrystal_CloudFlame = function (sub) {
        sub = Math.ceil(sub);
        var last = User._gameData.crystalNum;
        User._gameData.crystalNum -= sub;
        if (User._gameData.crystalNum < 0) {
            User._gameData.crystalNum = 0;
        }
        // EventMgr.instance.dispatch(EventDef.Game_OnUserCrystalChange,
        //     {
        //         curr : User._gameData.crystalNum,
        //         last : last
        //     })
    };
    User.GetCrystal_CloudFlame = function () {
        return User._gameData.crystalNum;
    };
    User.code = "";
    User.openId = "";
    User.token = null;
    User.nickName = "";
    User.gender = 0;
    User.skinIndex = 0;
    User.skinMax = 5;
    User._gameData = new UserGameData();
    return User;
}(Laya.Script));
exports.default = User;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewBase_1 = require("../ViewBase");
var GameOver = /** @class */ (function (_super) {
    __extends(GameOver, _super);
    function GameOver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GameOver.prototype.onEnable = function () {
    };
    GameOver.prototype.onDisable = function () {
    };
    return GameOver;
}(ViewBase_1.default));
exports.default = GameOver;
},{"../ViewBase":18}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewBase_1 = require("../ViewBase");
var RoleSkin_1 = require("./RoleSkin");
var User_1 = require("../../User/User");
var SoundMgr_1 = require("../../Mgr/SoundMgr");
var ViewMgr_1 = require("../../Mgr/ViewMgr");
var GameStart = /** @class */ (function (_super) {
    __extends(GameStart, _super);
    function GameStart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.settingBtn = null;
        _this.startBtn = null;
        _this.selectSkinZone = null;
        _this.leftBtn = null;
        _this.rightBtn = null;
        _this.role = null;
        _this.roleSkin = null;
        return _this;
    }
    GameStart.prototype.onAwake = function () {
        this.settingBtn = this.owner.getChildByName("SettingBtn");
        this.startBtn = this.owner.getChildByName("StartBtn");
        this.selectSkinZone = this.owner.getChildByName("SelectSkinZone");
        this.leftBtn = this.selectSkinZone.getChildByName("LeftBtn");
        this.rightBtn = this.selectSkinZone.getChildByName("RightBtn");
        this.role = this.selectSkinZone.getChildByName("Role");
        this.roleSkin = this.role.getComponent(RoleSkin_1.default);
        this.ShowSkinBtn();
        this.ShowSettingBtn();
    };
    GameStart.prototype.AddEvent_CloudFlame = function () {
        this.settingBtn.on(Laya.Event.CLICK, this, this.OnSettingBtn);
        this.startBtn.on(Laya.Event.CLICK, this, this.OnStartBtn);
        this.leftBtn.on(Laya.Event.CLICK, this, this.OnSkinChangeBtn, [true]);
        this.rightBtn.on(Laya.Event.CLICK, this, this.OnSkinChangeBtn, [false]);
    };
    GameStart.prototype.RemoveEvent_CloudFlame = function () {
        this.settingBtn.off(Laya.Event.CLICK, this, this.OnSettingBtn);
        this.startBtn.off(Laya.Event.CLICK, this, this.OnStartBtn);
        this.leftBtn.off(Laya.Event.CLICK, this, this.OnSkinChangeBtn);
        this.rightBtn.off(Laya.Event.CLICK, this, this.OnSkinChangeBtn);
    };
    GameStart.prototype.ShowSkinBtn = function () {
        this.leftBtn.visible = User_1.default.skinIndex > 0 ? true : false;
        this.rightBtn.visible = User_1.default.skinIndex < User_1.default.skinMax ? true : false;
    };
    GameStart.prototype.ShowSettingBtn = function () {
        this.settingBtn.skin = SoundMgr_1.default.instance.Enabled_CloudFlame ? "GameCommon/Sound_Yes.png" : "GameCommon/Sound_No.png";
    };
    GameStart.prototype.OnSettingBtn = function () {
        SoundMgr_1.default.instance.Enabled_CloudFlame = !SoundMgr_1.default.instance.Enabled_CloudFlame;
        if (SoundMgr_1.default.instance.Enabled_CloudFlame) {
            SoundMgr_1.default.instance.PlayBGM_CloudFlame("bgm");
        }
        this.ShowSettingBtn();
    };
    GameStart.prototype.OnStartBtn = function () {
        ViewMgr_1.default.instance.OpenView_CloudFlame(ViewMgr_1.ViewDef.Gaming, null, function () {
            ViewMgr_1.default.instance.CloseView_CloudFlame(ViewMgr_1.ViewDef.GameStart);
        });
    };
    GameStart.prototype.OnSkinChangeBtn = function (IsLeft) {
        User_1.default.skinIndex = IsLeft ? User_1.default.skinIndex - 1 : User_1.default.skinIndex + 1;
        this.ShowSkinBtn();
        this.roleSkin.ChangeSkin();
    };
    return GameStart;
}(ViewBase_1.default));
exports.default = GameStart;
},{"../../Mgr/SoundMgr":4,"../../Mgr/ViewMgr":5,"../../User/User":10,"../ViewBase":18,"./RoleSkin":13}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RoleSkin = /** @class */ (function (_super) {
    __extends(RoleSkin, _super);
    function RoleSkin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RoleSkin.prototype.onAwake = function () {
    };
    RoleSkin.prototype.InitSkin = function () {
    };
    RoleSkin.prototype.ChangeSkin = function () {
    };
    return RoleSkin;
}(Laya.Script));
exports.default = RoleSkin;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewBase_1 = require("../ViewBase");
var Gaming = /** @class */ (function (_super) {
    __extends(Gaming, _super);
    function Gaming() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Gaming.prototype.onEnable = function () {
    };
    Gaming.prototype.onDisable = function () {
    };
    return Gaming;
}(ViewBase_1.default));
exports.default = Gaming;
},{"../ViewBase":18}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LoadingView = /** @class */ (function (_super) {
    __extends(LoadingView, _super);
    function LoadingView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.processWidth = 0;
        return _this;
    }
    LoadingView.prototype.onAwake = function () {
        this.background = this.owner.getChildByName("Bg");
        this.processBarBg = this.background.getChildByName("processBarBg");
        if (this.processBarBg) {
            this.processBar = this.processBarBg.getChildByName("processBar");
            this.processWidth = this.processBar.width;
        }
        else {
            this.processBar = this.background.getChildByName("processBar");
            this.processWidth = Laya.stage.width;
        }
    };
    LoadingView.prototype.onUpdate = function () {
        this.background.width = Laya.stage.width;
        this.background.height = Laya.stage.height;
        if (!this.processBarBg) {
            this.processWidth = Laya.stage.width;
        }
    };
    LoadingView.prototype.SetProcess_CloudFlame = function (process) {
        if (process < 0)
            process = 0;
        if (process > 1)
            process = 1;
        var width = this.processWidth * process;
        if (width < 1)
            width = 1;
        this.processBar.width = width;
    };
    return LoadingView;
}(Laya.Script));
exports.default = LoadingView;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewBase_1 = require("../ViewBase");
var TipsView = /** @class */ (function (_super) {
    __extends(TipsView, _super);
    function TipsView() {
        return _super.call(this) || this;
    }
    TipsView.prototype.onAwake = function () {
        this.bg = this.owner.getChildByName("Bg");
        this.bg.x = Laya.stage.width / 2 - this.bg.width / 2;
        this.tipsText = this.bg.getChildByName("Text");
    };
    TipsView.prototype.OpenView_CloudFlame = function (data) {
        _super.prototype.OpenView_CloudFlame.call(this, data);
        this.SetTipsMsg_CloudFlame(data);
        Laya.timer.clearAll(this);
        var self = this;
        Laya.timer.once(3000, this, function () {
            self.CloseView_CloudFlame();
        });
    };
    TipsView.prototype.SetTipsMsg_CloudFlame = function (msg) {
        this.tipsText.text = msg;
    };
    return TipsView;
}(ViewBase_1.default));
exports.default = TipsView;
},{"../ViewBase":18}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewAutoScale = /** @class */ (function (_super) {
    __extends(ViewAutoScale, _super);
    function ViewAutoScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ViewAutoScale.prototype.onAwake = function () {
        var curVeiw = this.owner;
        var scaleX = Laya.stage.width / curVeiw.width;
        var scaleY = Laya.stage.height / curVeiw.height;
        var scale = scaleX < scaleY ? scaleX : scaleY;
        curVeiw.scale(scale, scale);
        curVeiw.x = (Laya.stage.width - curVeiw.width * scale) / 2;
        curVeiw.y = (Laya.stage.height - curVeiw.height * scale) / 2;
    };
    return ViewAutoScale;
}(Laya.Script));
exports.default = ViewAutoScale;
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ViewMgr_1 = require("../Mgr/ViewMgr");
//界面基类，所有功能模块界面继承于这个类。这种类型的界面不能嵌套。
var ViewBase = /** @class */ (function (_super) {
    __extends(ViewBase, _super);
    function ViewBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onCloseEvent = null;
        _this.onOpenEvent = null;
        _this.viewBase = true;
        _this.viewDef = ViewMgr_1.ViewDef.None;
        _this.data = {};
        return _this;
    }
    ViewBase.prototype.onAwake = function () {
        //删除时自动释放
        this.owner.autoDestroyAtClosed = true;
        this.owner.height = Laya.stage.height;
    };
    ViewBase.prototype.onEnable = function () {
        this.AddEvent_CloudFlame();
    };
    ViewBase.prototype.onDisable = function () {
        this.RemoveEvent_CloudFlame();
    };
    ViewBase.prototype.onDestroy = function () {
        this.RemoveEvent_CloudFlame();
    };
    ViewBase.prototype.OpenView_CloudFlame = function (data) {
        this.data = data;
        this.Show_CloudFlame();
        if (this.onOpenEvent) {
            this.onOpenEvent();
        }
    };
    ViewBase.prototype.AddEvent_CloudFlame = function () {
    };
    ViewBase.prototype.RemoveEvent_CloudFlame = function () {
        Laya.timer.clearAll(this);
    };
    ViewBase.prototype.CloseView_CloudFlame = function () {
        ViewMgr_1.default.instance.CloseView_CloudFlame(this.viewDef);
    };
    ViewBase.prototype.Hide_CloudFlame = function () {
        this.owner.visible = false;
        this.onHide_CloudFlame();
    };
    ViewBase.prototype.Show_CloudFlame = function () {
        this.owner.visible = true;
        this.onShow_CloudFlame();
    };
    ViewBase.prototype.ViewIsHide_CloudFlame = function () {
        return this.owner.alpha == 0;
    };
    ViewBase.prototype.onHide_CloudFlame = function () { };
    ViewBase.prototype.onShow_CloudFlame = function () { };
    ViewBase.prototype.onClose_CloudFlame = function () {
        Laya.timer.clearAll(this);
        Laya.Tween.clearAll(this);
        if (this.onCloseEvent) {
            this.onCloseEvent();
        }
    };
    return ViewBase;
}(Laya.Script));
exports.default = ViewBase;
},{"../Mgr/ViewMgr":5}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var WXAPI = /** @class */ (function () {
    function WXAPI() {
    }
    WXAPI.wxLogin_CloudFlame = function (onSuccess, onFail) {
        if (Laya.Browser.onMiniGame) {
            Laya.Browser.window.wx.login({
                success: function (res) {
                    if (res.code) {
                        var code = res.code;
                        onSuccess(code);
                        console.log("登陆成功,获取到code : " + code);
                    }
                }
            });
        }
    };
    WXAPI.onRewardedVideoAdLoad_CloudFlame = function () {
        console.log('激励视频 广告加载完成');
    };
    WXAPI.onRewardedVideoAdError_CloudFlame = function (err) {
        console.log('激励视频 广告加载失败' + err);
        if (WXAPI._onRewardedVideoAdFailed) {
            WXAPI._onRewardedVideoAdFailed();
        }
    };
    WXAPI.onRewardedVideoAdClose_CloudFlame = function (res) {
        if ((res && res.isEnded) || res == null) {
            console.log('激励视频 已完整观看');
            if (WXAPI._onRewardedVideoAdClose) {
                WXAPI._onRewardedVideoAdClose(true);
            }
        }
        else {
            console.log('激励视频 未完整观看');
            if (WXAPI._onRewardedVideoAdClose) {
                WXAPI._onRewardedVideoAdClose(false);
            }
        }
    };
    WXAPI.RegRewardedVideoAdEvent_CloudFlame = function (rewardedVideoAd) {
        rewardedVideoAd.onLoad(WXAPI.onRewardedVideoAdLoad_CloudFlame);
        rewardedVideoAd.onError(WXAPI.onRewardedVideoAdError_CloudFlame);
        rewardedVideoAd.onClose(WXAPI.onRewardedVideoAdClose_CloudFlame);
        WXAPI._isRegRewardedVideoAdEvent = true;
    };
    WXAPI.ShowRewardedVideoAd_CloudFlame = function (onAdClose, onFailed) {
        if (Laya.Browser.onMiniGame) {
            WXAPI._onRewardedVideoAdClose = onAdClose;
            WXAPI._onRewardedVideoAdFailed = onFailed;
            var rewardedVideoAd = Laya.Browser.window["wx"].createRewardedVideoAd({
                adUnitId: WXAPI.adUnitId,
            });
            if (!WXAPI._isRegRewardedVideoAdEvent) {
                WXAPI.RegRewardedVideoAdEvent_CloudFlame(rewardedVideoAd);
            }
            rewardedVideoAd.load().then(function () {
                var promise = rewardedVideoAd.show();
                promise.then(function () { return console.log('激励视频 广告显示成功'); });
                promise.catch(function (err) {
                    rewardedVideoAd.load()
                        .then(function () { return rewardedVideoAd.show(); })
                        .catch(function (err) {
                        console.log('激励视频 广告显示失败');
                        if (onFailed) {
                            onFailed();
                        }
                    });
                });
            }).catch(function (err) {
                console.log('激励视频 广告加载失败');
                if (onFailed) {
                    onFailed();
                }
            });
        }
        else {
            onAdClose(true);
        }
    };
    //----------------------------------------------------------------
    //-------------------------小游戏跳转---------------------------
    WXAPI.NavigateToMiniProgram_CloudFlame = function (appId, path, onSuccess, onFail, onComplate) {
        if (Laya.Browser.onMiniGame) {
            console.log("跳转游戏： " + appId);
            Laya.Browser.window["wx"].navigateToMiniProgram({
                appId: appId,
                path: path,
                extraData: {
                    foo: 'bar'
                },
                envVersion: 'release',
                success: function (res) {
                    if (onSuccess) {
                        onSuccess(res);
                    }
                },
                fail: function (res) {
                    if (onFail) {
                        onFail(res);
                    }
                },
                complete: function (res) {
                    if (onComplate) {
                        onComplate(res);
                    }
                }
            });
        }
    };
    WXAPI.Share_CloudFlame = function (complate, titel, imageUrl) {
        var _this = this;
        if (Laya.Browser.onMiniGame) {
            WXAPI._onShow = function () {
                Laya.Browser.window["wx"].offShow(WXAPI._onShow);
                WXAPI._onShow = null;
                var c = Date.now() - _this._lastShareTime;
                if (complate) {
                    if (Date.now() - _this._lastShareTime > 2000) {
                        complate(true);
                    }
                    else {
                        complate(false);
                    }
                }
            };
            Laya.Browser.window["wx"].onShow(WXAPI._onShow);
            this._lastShareTime = Date.now();
            Laya.Browser.window["wx"].shareAppMessage({
                title: titel,
                imageUrl: imageUrl
            });
        }
    };
    //----------------------------------------------------------------------
    //--------------------插屏幕广告---------------------------------------
    WXAPI.ShowInterstitialAd_CloudFlame = function (onAdClose, onFailed) {
        if (Laya.Browser.onMiniGame) {
            var interstitialAd = Laya.Browser.window["wx"].createInterstitialAd({
                adUnitId: WXAPI.InsAdUnitId,
            });
            interstitialAd.onLoad(function () {
                console.log('插屏广告 加载完成');
                interstitialAd.show().catch(function (err) {
                    console.log('插屏广告 显示失败 ：' + err);
                    if (onFailed) {
                        onFailed();
                    }
                });
            });
            interstitialAd.onError(function (err) {
                console.log('插屏广告 加载失败' + err);
                if (onFailed) {
                    onFailed();
                }
            });
            interstitialAd.onClose(function () {
                console.log('插屏广告 关闭');
                if (onAdClose) {
                    onAdClose();
                }
            });
        }
        else {
            onAdClose();
        }
    };
    /**
     * 得到小程序启动参数的同步方法，可得到一个Object返回值，返回值具体的数据结构在下面的列表中
     * scene	number	启动小游戏的场景值
     * query	Object	启动小游戏的 query 参数
     * shareTicket	string	shareTicket，详见获取更多转发信息
     * referrerInfo	object	来源信息。从另一个小程序、公众号或 App 进入小程序时返回。否则返回 {}
     * https://developers.weixin.qq.com/minigame/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html
     * @static
     * @returns {LaunchOptions}
     * @memberof WXAPI
     */
    WXAPI.GetLaunchOptionsSync_CloudFlame = function () {
        // let result = { scene: 0, query: null, shareTicket: "", referrerInfo: null };
        if (Laya.Browser.onMiniGame) {
            var obj_1 = Laya.Browser.window["wx"].getLaunchOptionsSync();
            console.log("场景值 " + obj_1.scene);
            var str = JSON.stringify(obj_1.query);
            console.log("Query参数 " + str);
            var key = obj_1.query["key"];
            console.log("Query参数：key " + key);
            console.log("ShareTicket " + obj_1.shareTicket);
            console.log("ReferrerInfo.appId " + obj_1.referrerInfo.appId);
            console.log("ReferrerInfo.extraData " + obj_1.referrerInfo.extraData);
            return obj_1;
        }
        var obj = { scene: 1001, query: "", shareTicket: "", appId: "", extraData: "" };
        return obj;
    };
    //----------------------------------------------------------------------
    /**
     * 打开微信左上角分享转发点击事件,在游戏逻辑中调用一次即可
     * 注意此方法只会在真机上执行，在微信模拟器环境下点击转发按钮什么都不会发生
     *
     * @static
     * @param {string} titel 分享标题
     * @param {string} imageUrl 分享图片地址
     * @param {Function} [success] 成功回调函数(可不填)
     * @param {Function} [fail] 失败回调函数(可不填)
     * @param {Function} [complate] 完成回调函数，成功失败都会执行(可不填)
     * @memberof WXAPI
     */
    WXAPI.SetShareMenu_CloudFlame = function (titel, imageUrl, success, fail, complate) {
        if (Laya.Browser.onMiniGame) {
            console.log("小游戏设置转发按钮");
            Laya.Browser.window["wx"].showShareMenu({
                withShareTicket: false,
                success: success,
                fail: fail,
                complete: complate
            });
            Laya.Browser.window["wx"].onShareAppMessage(function () {
                return {
                    title: titel,
                    imageUrl: imageUrl
                };
            });
        }
    };
    //检测更新
    WXAPI.CheckUpdate_CloudFlame = function () {
        if (Laya.Browser.onMiniGame) {
            var updateManager = Laya.Browser.window["wx"].getUpdateManager();
            updateManager.onCheckForUpdate(function (res) {
                console.log("是否需要更新 : ", res.hasUpdate);
            });
            updateManager.onUpdateReady(function () {
                Laya.Browser.window["wx"].showModal({
                    title: '更新提示',
                    content: '新版本已经准备好，是否重启小游戏？',
                    success: function (res) {
                        if (res.confirm) {
                            updateManager.applyUpdate();
                        }
                    }
                });
            });
            updateManager.onUpdateFailed(function () {
                console.log("新版本下载失败!!!");
            });
        }
    };
    WXAPI.adUnitId = "adunit-eef36f84c44bbdc1";
    WXAPI.bannerAdUnitId = "adunit-440e21cc02c0d282";
    WXAPI.InsAdUnitId = "adunit-440e21cc02c0d282";
    //-------------------------激励视频---------------------------------
    WXAPI._isRegRewardedVideoAdEvent = false;
    WXAPI._onRewardedVideoAdFailed = null;
    WXAPI._onRewardedVideoAdClose = null;
    //----------------------------------------------------------------------
    //---------------------分享----------------------------------------
    WXAPI._onShow = null;
    WXAPI._lastShareTime = 0;
    return WXAPI;
}());
exports.default = WXAPI;
},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var View;
    (function (View) {
        var LoadingUI = /** @class */ (function (_super) {
            __extends(LoadingUI, _super);
            function LoadingUI() {
                return _super.call(this) || this;
            }
            LoadingUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(LoadingUI.uiView);
            };
            LoadingUI.uiView = { "type": "Scene", "props": { "width": 1920, "height": 1080 }, "compId": 2, "child": [{ "type": "Clip", "props": { "skin": "Loading/LoadingBG.jpg", "name": "Bg" }, "compId": 3, "child": [{ "type": "Clip", "props": { "width": 1920, "skin": "Loading/LoadingBar.png", "name": "processBar", "left": 0, "height": 22, "bottom": 98 }, "compId": 4 }] }, { "type": "Script", "props": { "y": 0, "x": 0, "runtime": "View/LoadingView.ts" }, "compId": 5 }], "loadList": ["Loading/LoadingBG.jpg", "Loading/LoadingBar.png"], "loadList3D": [] };
            return LoadingUI;
        }(Scene));
        View.LoadingUI = LoadingUI;
        REG("ui.View.LoadingUI", LoadingUI);
    })(View = ui.View || (ui.View = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
